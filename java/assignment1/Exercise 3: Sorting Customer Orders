## Exercise 3: Sorting Customer Orders

import java.util.*;

// Order class representing a customer's order
class Order {
    int orderId;
    String customerName;
    double totalPrice;

    public Order(int orderId, String customerName, double totalPrice) {
        this.orderId = orderId;
        this.customerName = customerName;
        this.totalPrice = totalPrice;
    }

    @Override
    public String toString() {
        return "Order ID: " + orderId + ", Customer: " + customerName + ", Total Price: â‚¹" + totalPrice;
    }
}

// Sorting algorithms for Orders
class SortAlgorithms {

    // Bubble Sort to sort orders by totalPrice (ascending)
    public static void bubbleSort(Order[] orders) {
        int n = orders.length;
        for (int i = 0; i < n - 1; i++) {
            boolean swapped = false;
            for (int j = 0; j < n - i - 1; j++) {
                if (orders[j].totalPrice > orders[j + 1].totalPrice) {
                    // Swap
                    Order temp = orders[j];
                    orders[j] = orders[j + 1];
                    orders[j + 1] = temp;
                    swapped = true;
                }
            }
            if (!swapped) break; // Optimization: stop if already sorted
        }
    }

    // Quick Sort to sort orders by totalPrice (ascending)
    public static void quickSort(Order[] orders, int low, int high) {
        if (low < high) {
            int pi = partition(orders, low, high);
            quickSort(orders, low, pi - 1);
            quickSort(orders, pi + 1, high);
        }
    }

    // Partition function for Quick Sort
    private static int partition(Order[] orders, int low, int high) {
        double pivot = orders[high].totalPrice;
        int i = low - 1;
        for (int j = low; j < high; j++) {
            if (orders[j].totalPrice <= pivot) {
                i++;
                Order temp = orders[i];
                orders[i] = orders[j];
                orders[j] = temp;
            }
        }
        Order temp = orders[i + 1];
        orders[i + 1] = orders[high];
        orders[high] = temp;
        return i + 1;
    }
}

// Main class to demonstrate sorting
public class Main {
    public static void main(String[] args) {
        // Sample orders
        Order[] orders = {
            new Order(201, "Alice", 1500.75),
            new Order(202, "Bob", 750.50),
            new Order(203, "Charlie", 2300.00),
            new Order(204, "David", 1200.00),
            new Order(205, "Eva", 999.99)
        };

        // ----------- Bubble Sort Demo -----------
        System.out.println("=== Bubble Sort by Total Price ===");
        Order[] bubbleSorted = orders.clone(); // clone to preserve original
        SortAlgorithms.bubbleSort(bubbleSorted);
        for (Order o : bubbleSorted) {
            System.out.println(o);
        }

        // ----------- Quick Sort Demo -----------
        System.out.println("\n=== Quick Sort by Total Price ===");
        Order[] quickSorted = orders.clone(); // clone to preserve original
        SortAlgorithms.quickSort(quickSorted, 0, quickSorted.length - 1);
        for (Order o : quickSorted) {
            System.out.println(o);
        }
    }
}

Output:
=== Bubble Sort by Total Price ===
Order ID: 202, Customer: Bob, Total Price: ?750.5
Order ID: 205, Customer: Eva, Total Price: ?999.99
Order ID: 204, Customer: David, Total Price: ?1200.0
Order ID: 201, Customer: Alice, Total Price: ?1500.75
Order ID: 203, Customer: Charlie, Total Price: ?2300.0

=== Quick Sort by Total Price ===
Order ID: 202, Customer: Bob, Total Price: ?750.5
Order ID: 205, Customer: Eva, Total Price: ?999.99
Order ID: 204, Customer: David, Total Price: ?1200.0
Order ID: 201, Customer: Alice, Total Price: ?1500.75
Order ID: 203, Customer: Charlie, Total Price: ?2300.0
