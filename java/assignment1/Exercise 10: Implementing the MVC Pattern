##  Exercise 10: Implementing the MVC Pattern

// Step 2: Model Class - Student
class Student {
    private String id;
    private String name;
    private String grade;

    public Student(String id, String name, String grade) {
        this.id = id;
        this.name = name;
        this.grade = grade;
    }

    // Getters and Setters
    public String getId() { return id; }
    public void setId(String id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getGrade() { return grade; }
    public void setGrade(String grade) { this.grade = grade; }
}

// Step 3: View Class - Displays student info
class StudentView {
    public void displayStudentDetails(String id, String name, String grade) {
        System.out.println("Student Details:");
        System.out.println("ID:    " + id);
        System.out.println("Name:  " + name);
        System.out.println("Grade: " + grade);
        System.out.println("------------------------");
    }
}

// Step 4: Controller Class
class StudentController {
    private Student model;
    private StudentView view;

    public StudentController(Student model, StudentView view) {
        this.model = model;
        this.view = view;
    }

    // Controller methods to update model
    public void setStudentName(String name) { model.setName(name); }
    public String getStudentName() { return model.getName(); }

    public void setStudentId(String id) { model.setId(id); }
    public String getStudentId() { return model.getId(); }

    public void setStudentGrade(String grade) { model.setGrade(grade); }
    public String getStudentGrade() { return model.getGrade(); }

    // Update view based on model data
    public void updateView() {
        view.displayStudentDetails(model.getId(), model.getName(), model.getGrade());
    }
}

// Step 5: Test the MVC Implementation
public class MVCPatternExample {
    public static void main(String[] args) {
        // Create model
        Student student = new Student("S101", "Alice", "A");

        // Create view
        StudentView view = new StudentView();

        // Create controller
        StudentController controller = new StudentController(student, view);

        // Display initial details
        System.out.println("Initial Student Info:");
        controller.updateView();

        // Modify student data
        controller.setStudentName("Alice Johnson");
        controller.setStudentGrade("A+");

        // Display updated info
        System.out.println("Updated Student Info:");
        controller.updateView();
    }
}

Output :
Initial Student Info:
Student Details:
ID:    S101
Name:  Alice
Grade: A
------------------------
Updated Student Info:
Student Details:
ID:    S101
Name:  Alice Johnson
Grade: A+
------------------------


