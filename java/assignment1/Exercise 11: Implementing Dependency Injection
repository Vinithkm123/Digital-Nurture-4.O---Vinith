##  Exercise 11: Implementing Dependency Injection

// Step 2: Repository Interface
interface CustomerRepository {
    String findCustomerById(String id);
}

// Step 3: Concrete Repository
class CustomerRepositoryImpl implements CustomerRepository {
    @Override
    public String findCustomerById(String id) {
        // Simulated database call
        return "Customer{id='" + id + "', name='John Doe', email='john.doe@example.com'}";
    }
}

// Step 4: Service Class that depends on Repository
class CustomerService {
    private final CustomerRepository customerRepository;

    // Step 5: Constructor-based Dependency Injection
    public CustomerService(CustomerRepository customerRepository) {
        this.customerRepository = customerRepository;
    }

    public void displayCustomer(String id) {
        String customer = customerRepository.findCustomerById(id);
        System.out.println("Fetched Customer: " + customer);
    }
}

// Step 6: Main class to test Dependency Injection
public class DependencyInjectionExample {
    public static void main(String[] args) {
        // Create repository instance
        CustomerRepository repo = new CustomerRepositoryImpl();

        // Inject repository into service
        CustomerService service = new CustomerService(repo);

        // Use the service
        service.displayCustomer("C102");
    }
}

Output :

Fetched Customer: Customer{id='C102', name='John Doe', email='john.doe@example.com'}
