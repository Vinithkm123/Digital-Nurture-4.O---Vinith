## Exercise 4: Employee Management System

import java.util.*;

// Employee class
class Employee {
    int employeeId;
    String name;
    String position;
    double salary;

    public Employee(int employeeId, String name, String position, double salary) {
        this.employeeId = employeeId;
        this.name = name;
        this.position = position;
        this.salary = salary;
    }

    @Override
    public String toString() {
        return "ID: " + employeeId + ", Name: " + name + ", Position: " + position + ", Salary: â‚¹" + salary;
    }
}

// EmployeeManager class to manage the array of employees
class EmployeeManager {
    private Employee[] employees;
    private int count;

    public EmployeeManager(int capacity) {
        employees = new Employee[capacity];
        count = 0;
    }

    // Add a new employee
    public void addEmployee(Employee e) {
        if (count < employees.length) {
            employees[count++] = e;
            System.out.println("Employee added: " + e.name);
        } else {
            System.out.println("Error: Employee list is full.");
        }
    }

    // Search for an employee by ID
    public Employee searchEmployee(int id) {
        for (int i = 0; i < count; i++) {
            if (employees[i].employeeId == id) {
                return employees[i];
            }
        }
        return null;
    }

    // Traverse and display all employees
    public void traverseEmployees() {
        if (count == 0) {
            System.out.println("No employees found.");
            return;
        }
        for (int i = 0; i < count; i++) {
            System.out.println(employees[i]);
        }
    }

    // Delete employee by ID
    public void deleteEmployee(int id) {
        for (int i = 0; i < count; i++) {
            if (employees[i].employeeId == id) {
                // Shift remaining employees left
                for (int j = i; j < count - 1; j++) {
                    employees[j] = employees[j + 1];
                }
                employees[--count] = null;
                System.out.println("Employee with ID " + id + " deleted.");
                return;
            }
        }
        System.out.println("Employee with ID " + id + " not found.");
    }
}

// Main class to run the program
public class Main {
    public static void main(String[] args) {
        EmployeeManager manager = new EmployeeManager(5); // max 5 employees

        // Add employees
        manager.addEmployee(new Employee(101, "Alice", "Developer", 70000));
        manager.addEmployee(new Employee(102, "Bob", "Designer", 60000));
        manager.addEmployee(new Employee(103, "Charlie", "Manager", 90000));

        // Traverse all employees
        System.out.println("\n=== All Employees ===");
        manager.traverseEmployees();

        // Search for employee
        System.out.println("\n=== Search Employee ===");
        Employee e = manager.searchEmployee(102);
        if (e != null) {
            System.out.println("Found: " + e);
        } else {
            System.out.println("Employee not found.");
        }

        // Delete employee
        System.out.println("\n=== Delete Employee ===");
        manager.deleteEmployee(102);

        // Display after deletion
        System.out.println("\n=== After Deletion ===");
        manager.traverseEmployees();
    }
}

output:
Employee added: Alice
Employee added: Bob
Employee added: Charlie

=== All Employees ===
ID: 101, Name: Alice, Position: Developer, Salary: ?70000.0
ID: 102, Name: Bob, Position: Designer, Salary: ?60000.0
ID: 103, Name: Charlie, Position: Manager, Salary: ?90000.0

=== Search Employee ===
Found: ID: 102, Name: Bob, Position: Designer, Salary: ?60000.0

=== Delete Employee ===
Employee with ID 102 deleted.

=== After Deletion ===
ID: 101, Name: Alice, Position: Developer, Salary: ?70000.0
ID: 103, Name: Charlie, Position: Manager, Salary: ?90000.0
