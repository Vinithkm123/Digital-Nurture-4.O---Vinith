## Mockito Hands-On Exercises (JUnit 5)

Exercise 1: Mocking and Stubbing
Scenario: Mock an external API and return predefined values.

MyServiceTest.java
java
Copy
Edit
import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;
import org.mockito.Mockito;

public class MyServiceTest {

    @Test
    public void testExternalApi() {
        ExternalApi mockApi = Mockito.mock(ExternalApi.class);
        when(mockApi.getData()).thenReturn("Mock Data");

        MyService service = new MyService(mockApi);
        String result = service.fetchData();

        assertEquals("Mock Data", result);
    }
}
Exercise 2: Verifying Interactions
Scenario: Ensure a method is called.

java
Copy
Edit
@Test
public void testVerifyInteraction() {
    ExternalApi mockApi = mock(ExternalApi.class);
    MyService service = new MyService(mockApi);

    service.fetchData();

    verify(mockApi).getData();
}
Exercise 3: Argument Matching
Scenario: Match specific or any arguments.

java
Copy
Edit
@Test
public void testArgumentMatcher() {
    ExternalApi mockApi = mock(ExternalApi.class);
    MyService service = new MyService(mockApi);

    service.processData("TestPayload");

    // Verify called with exact string
    verify(mockApi).sendData("TestPayload");

    // Or use argument matcher
    verify(mockApi).sendData(anyString());
}
Exercise 4: Handling Void Methods
Scenario: Stub and verify a void method.

java
Copy
Edit
@Test
public void testVoidMethod() {
    ExternalApi mockApi = mock(ExternalApi.class);
    doNothing().when(mockApi).sendData(anyString());

    MyService service = new MyService(mockApi);
    service.processData("data");

    verify(mockApi).sendData("data");
}
Exercise 5: Multiple Return Values
Scenario: Return different values on each call.

java
Copy
Edit
@Test
public void testMultipleReturns() {
    ExternalApi mockApi = mock(ExternalApi.class);
    when(mockApi.getData())
        .thenReturn("First Call")
        .thenReturn("Second Call");

    MyService service = new MyService(mockApi);

    assertEquals("First Call", service.fetchData());
    assertEquals("Second Call", service.fetchData());
}
Exercise 6: Verifying Interaction Order
Scenario: Check method call order.

java
Copy
Edit
@Test
public void testInteractionOrder() {
    ExternalApi mockApi = mock(ExternalApi.class);

    mockApi.getData();
    mockApi.sendData("data");

    InOrder inOrder = inOrder(mockApi);
    inOrder.verify(mockApi).getData();
    inOrder.verify(mockApi).sendData("data");
}
Exercise 7: Void Method with Exception
Scenario: Simulate void method throwing exception.

java
Copy
Edit
@Test
public void testVoidMethodThrowsException() {
    ExternalApi mockApi = mock(ExternalApi.class);
    doThrow(new RuntimeException("Failed")).when(mockApi).sendData(anyString());

    MyService service = new MyService(mockApi);

    assertThrows(RuntimeException.class, () -> service.processData("error"));
}
