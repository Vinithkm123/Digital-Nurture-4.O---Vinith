## Exercise 1: Control Structures

sql
Copy
Edit
-- Scenario 1: Discount for customers over 60
BEGIN
  FOR rec IN (SELECT * FROM Loans l JOIN Customers c ON l.CustomerID = c.CustomerID) LOOP
    IF MONTHS_BETWEEN(SYSDATE, rec.DOB) / 12 > 60 THEN
      UPDATE Loans
      SET InterestRate = InterestRate - 1
      WHERE LoanID = rec.LoanID;
    END IF;
  END LOOP;
END;
/

-- Scenario 2: Promote to VIP
BEGIN
  FOR rec IN (SELECT * FROM Customers) LOOP
    IF rec.Balance > 10000 THEN
      UPDATE Customers SET IsVIP = 'TRUE' WHERE CustomerID = rec.CustomerID;
    END IF;
  END LOOP;
END;
/

-- Scenario 3: Reminders for loans due soon
BEGIN
  FOR rec IN (SELECT * FROM Loans WHERE EndDate <= SYSDATE + 30) LOOP
    DBMS_OUTPUT.PUT_LINE('Reminder: Loan ' || rec.LoanID || ' is due soon for customer ' || rec.CustomerID);
  END LOOP;
END;
/
✅ Exercise 2: Error Handling
sql
Copy
Edit
-- Scenario 1: Safe fund transfer
CREATE OR REPLACE PROCEDURE SafeTransferFunds(
  p_fromAccount NUMBER,
  p_toAccount NUMBER,
  p_amount NUMBER
)
IS
  v_balance NUMBER;
BEGIN
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_fromAccount;
  
  IF v_balance < p_amount THEN
    RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds');
  END IF;
  
  UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_fromAccount;
  UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_toAccount;
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

-- Scenario 2: Update salary
CREATE OR REPLACE PROCEDURE UpdateSalary(p_empID NUMBER, p_percent NUMBER) IS
BEGIN
  UPDATE Employees
  SET Salary = Salary + Salary * p_percent / 100
  WHERE EmployeeID = p_empID;
  
  IF SQL%ROWCOUNT = 0 THEN
    RAISE_APPLICATION_ERROR(-20002, 'Employee not found');
  END IF;
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

-- Scenario 3: Add new customer
CREATE OR REPLACE PROCEDURE AddNewCustomer(
  p_customerID NUMBER,
  p_name VARCHAR2,
  p_dob DATE,
  p_balance NUMBER
)
IS
BEGIN
  INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
  VALUES (p_customerID, p_name, p_dob, p_balance, SYSDATE);
  COMMIT;
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Error: Customer already exists.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unexpected Error: ' || SQLERRM);
END;
/
✅ Exercise 3: Stored Procedures
sql
Copy
Edit
-- Scenario 1: Process monthly interest
CREATE OR REPLACE PROCEDURE ProcessMonthlyInterest IS
BEGIN
  UPDATE Accounts
  SET Balance = Balance + Balance * 0.01
  WHERE AccountType = 'Savings';
END;
/

-- Scenario 2: Update employee bonus
CREATE OR REPLACE PROCEDURE UpdateEmployeeBonus(p_dept VARCHAR2, p_bonus NUMBER) IS
BEGIN
  UPDATE Employees
  SET Salary = Salary + Salary * p_bonus / 100
  WHERE Department = p_dept;
END;
/

-- Scenario 3: Transfer funds
CREATE OR REPLACE PROCEDURE TransferFunds(p_from NUMBER, p_to NUMBER, p_amt NUMBER) IS
  v_balance NUMBER;
BEGIN
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_from;
  
  IF v_balance >= p_amt THEN
    UPDATE Accounts SET Balance = Balance - p_amt WHERE AccountID = p_from;
    UPDATE Accounts SET Balance = Balance + p_amt WHERE AccountID = p_to;
  ELSE
    RAISE_APPLICATION_ERROR(-20003, 'Insufficient Balance');
  END IF;
  
  COMMIT;
END;
/
✅ Exercise 4: Functions
sql
Copy
Edit
-- Scenario 1: Calculate age
CREATE OR REPLACE FUNCTION CalculateAge(p_dob DATE) RETURN NUMBER IS
BEGIN
  RETURN TRUNC(MONTHS_BETWEEN(SYSDATE, p_dob) / 12);
END;
/

-- Scenario 2: Calculate monthly installment
CREATE OR REPLACE FUNCTION CalculateMonthlyInstallment(
  p_loanAmount NUMBER,
  p_rate NUMBER,
  p_years NUMBER
) RETURN NUMBER IS
  v_months NUMBER := p_years * 12;
  v_monthlyRate NUMBER := p_rate / 12 / 100;
BEGIN
  RETURN p_loanAmount * v_monthlyRate / (1 - POWER(1 + v_monthlyRate, -v_months));
END;
/

-- Scenario 3: Has sufficient balance
CREATE OR REPLACE FUNCTION HasSufficientBalance(p_accID NUMBER, p_amt NUMBER) RETURN BOOLEAN IS
  v_balance NUMBER;
BEGIN
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_accID;
  RETURN v_balance >= p_amt;
END;
/
✅ Exercise 5: Triggers
sql
Copy
Edit
-- Scenario 1: Update last modified date
CREATE OR REPLACE TRIGGER UpdateCustomerLastModified
BEFORE UPDATE ON Customers
FOR EACH ROW
BEGIN
  :NEW.LastModified := SYSDATE;
END;
/

-- Scenario 2: Audit log
CREATE TABLE AuditLog (
  LogID NUMBER GENERATED ALWAYS AS IDENTITY,
  ActionType VARCHAR2(10),
  TransactionID NUMBER,
  LogDate DATE DEFAULT SYSDATE
);

CREATE OR REPLACE TRIGGER LogTransaction
AFTER INSERT ON Transactions
FOR EACH ROW
BEGIN
  INSERT INTO AuditLog (ActionType, TransactionID) VALUES ('INSERT', :NEW.TransactionID);
END;
/

-- Scenario 3: Enforce transaction rules
CREATE OR REPLACE TRIGGER CheckTransactionRules
BEFORE INSERT ON Transactions
FOR EACH ROW
DECLARE
  v_balance NUMBER;
BEGIN
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = :NEW.AccountID;
  
  IF :NEW.TransactionType = 'Withdrawal' AND :NEW.Amount > v_balance THEN
    RAISE_APPLICATION_ERROR(-20004, 'Insufficient balance');
  ELSIF :NEW.TransactionType = 'Deposit' AND :NEW.Amount <= 0 THEN
    RAISE_APPLICATION_ERROR(-20005, 'Invalid deposit amount');
  END IF;
END;
/
✅ Exercise 6: Cursors
sql
Copy
Edit
-- Scenario 1: Generate monthly statements
DECLARE
  CURSOR c_trans IS
    SELECT * FROM Transactions
    WHERE TRUNC(TransactionDate, 'MM') = TRUNC(SYSDATE, 'MM');
BEGIN
  FOR rec IN c_trans LOOP
    DBMS_OUTPUT.PUT_LINE('Customer Transaction: ID ' || rec.TransactionID || ', Amount: ' || rec.Amount);
  END LOOP;
END;
/

-- Scenario 2: Apply annual fee
DECLARE
  CURSOR c_accounts IS SELECT AccountID, Balance FROM Accounts;
BEGIN
  FOR rec IN c_accounts LOOP
    UPDATE Accounts SET Balance = Balance - 100 WHERE AccountID = rec.AccountID;
  END LOOP;
END;
/

-- Scenario 3: Update interest rates
DECLARE
  CURSOR c_loans IS SELECT LoanID, InterestRate FROM Loans;
BEGIN
  FOR rec IN c_loans LOOP
    UPDATE Loans SET InterestRate = rec.InterestRate + 0.5 WHERE LoanID = rec.LoanID;
  END LOOP;
END;
/
✅ Exercise 7: Packages
sql
Copy
Edit
-- CustomerManagement package
CREATE OR REPLACE PACKAGE CustomerManagement AS
  PROCEDURE AddCustomer(p_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER);
  PROCEDURE UpdateCustomer(p_id NUMBER, p_name VARCHAR2);
  FUNCTION GetBalance(p_id NUMBER) RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY CustomerManagement AS
  PROCEDURE AddCustomer(p_id NUMBER, p_name VARCHAR2, p_dob DATE, p_balance NUMBER) IS
  BEGIN
    INSERT INTO Customers VALUES (p_id, p_name, p_dob, p_balance, SYSDATE);
  END;

  PROCEDURE UpdateCustomer(p_id NUMBER, p_name VARCHAR2) IS
  BEGIN
    UPDATE Customers SET Name = p_name WHERE CustomerID = p_id;
  END;

  FUNCTION GetBalance(p_id NUMBER) RETURN NUMBER IS
    v_balance NUMBER;
  BEGIN
    SELECT Balance INTO v_balance FROM Customers WHERE CustomerID = p_id;
    RETURN v_balance;
  END;
END;
/

-- EmployeeManagement package
CREATE OR REPLACE PACKAGE EmployeeManagement AS
  PROCEDURE Hire(p_id NUMBER, p_name VARCHAR2, p_pos VARCHAR2, p_sal NUMBER, p_dept VARCHAR2, p_date DATE);
  PROCEDURE UpdateEmp(p_id NUMBER, p_sal NUMBER);
  FUNCTION GetAnnualSalary(p_id NUMBER) RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY EmployeeManagement AS
  PROCEDURE Hire(p_id NUMBER, p_name VARCHAR2, p_pos VARCHAR2, p_sal NUMBER, p_dept VARCHAR2, p_date DATE) IS
  BEGIN
    INSERT INTO Employees VALUES (p_id, p_name, p_pos, p_sal, p_dept, p_date);
  END;

  PROCEDURE UpdateEmp(p_id NUMBER, p_sal NUMBER) IS
  BEGIN
    UPDATE Employees SET Salary = p_sal WHERE EmployeeID = p_id;
  END;

  FUNCTION GetAnnualSalary(p_id NUMBER) RETURN NUMBER IS
    v_sal NUMBER;
  BEGIN
    SELECT Salary INTO v_sal FROM Employees WHERE EmployeeID = p_id;
    RETURN v_sal * 12;
  END;
END;
/

-- AccountOperations package
CREATE OR REPLACE PACKAGE AccountOperations AS
  PROCEDURE OpenAccount(p_id NUMBER, p_custID NUMBER, p_type VARCHAR2, p_bal NUMBER);
  PROCEDURE CloseAccount(p_id NUMBER);
  FUNCTION TotalBalance(p_custID NUMBER) RETURN NUMBER;
END;
/

CREATE OR REPLACE PACKAGE BODY AccountOperations AS
  PROCEDURE OpenAccount(p_id NUMBER, p_custID NUMBER, p_type VARCHAR2, p_bal NUMBER) IS
  BEGIN
    INSERT INTO Accounts VALUES (p_id, p_custID, p_type, p_bal, SYSDATE);
  END;

  PROCEDURE CloseAccount(p_id NUMBER) IS
  BEGIN
    DELETE FROM Accounts WHERE AccountID = p_id;
  END;

  FUNCTION TotalBalance(p_custID NUMBER) RETURN NUMBER IS
    v_sum NUMBER;
  BEGIN
    SELECT SUM(Balance) INTO v_sum FROM Accounts WHERE CustomerID = p_custID;
    RETURN v_sum;
  END;
END;
/
