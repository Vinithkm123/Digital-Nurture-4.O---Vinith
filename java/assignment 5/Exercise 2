##Exercise 2: Error Handling

sql
Copy
Edit
-- Scenario 1: Safe fund transfer
CREATE OR REPLACE PROCEDURE SafeTransferFunds(
  p_fromAccount NUMBER,
  p_toAccount NUMBER,
  p_amount NUMBER
)
IS
  v_balance NUMBER;
BEGIN
  SELECT Balance INTO v_balance FROM Accounts WHERE AccountID = p_fromAccount;
  
  IF v_balance < p_amount THEN
    RAISE_APPLICATION_ERROR(-20001, 'Insufficient funds');
  END IF;
  
  UPDATE Accounts SET Balance = Balance - p_amount WHERE AccountID = p_fromAccount;
  UPDATE Accounts SET Balance = Balance + p_amount WHERE AccountID = p_toAccount;
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    ROLLBACK;
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

-- Scenario 2: Update salary
CREATE OR REPLACE PROCEDURE UpdateSalary(p_empID NUMBER, p_percent NUMBER) IS
BEGIN
  UPDATE Employees
  SET Salary = Salary + Salary * p_percent / 100
  WHERE EmployeeID = p_empID;
  
  IF SQL%ROWCOUNT = 0 THEN
    RAISE_APPLICATION_ERROR(-20002, 'Employee not found');
  END IF;
  
  COMMIT;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
END;
/

-- Scenario 3: Add new customer
CREATE OR REPLACE PROCEDURE AddNewCustomer(
  p_customerID NUMBER,
  p_name VARCHAR2,
  p_dob DATE,
  p_balance NUMBER
)
IS
BEGIN
  INSERT INTO Customers (CustomerID, Name, DOB, Balance, LastModified)
  VALUES (p_customerID, p_name, p_dob, p_balance, SYSDATE);
  COMMIT;
EXCEPTION
  WHEN DUP_VAL_ON_INDEX THEN
    DBMS_OUTPUT.PUT_LINE('Error: Customer already exists.');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unexpected Error: ' || SQLERRM);
END;
