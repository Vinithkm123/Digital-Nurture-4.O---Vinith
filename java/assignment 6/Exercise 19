##Create App
bash
Copy
Edit
npx create-react-app gitclientapp
cd gitclientapp
npm start

Install Axios
bash
Copy
Edit
npm install axios
🛠️ Core Implementation

GitClient.js (API Module)
src/GitClient.js

jsx
Copy
Edit
import axios from 'axios';

class GitClient {
  static async getRepositories(username) {
    const url = `https://api.github.com/users/${username}/repos`;
    const response = await axios.get(url);
    const repoNames = response.data.map(repo => repo.name);
    return repoNames;
  }
}

export default GitClient;

App.js (Using GitClient)
src/App.js

jsx
Copy
Edit
import React, { useState, useEffect } from 'react';
import GitClient from './GitClient';

function App() {
  const [repositories, setRepositories] = useState([]);

  useEffect(() => {
    GitClient.getRepositories('techiesyed').then(setRepositories);
  }, []);

  return (
    <div style={{ padding: '20px' }}>
      <h2>GitHub Repositories of techiesyed</h2>
      <ul>
        {repositories.map((repo, index) => (
          <li key={index}>{repo}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;

Output:
Displays a list of GitHub repositories for techiesyed.

Unit Testing with Jest and Mocking Axios

Create GitClient.test.js
src/GitClient.test.js

jsx
Copy
Edit
import axios from 'axios';
import GitClient from './GitClient';

jest.mock('axios');  // Mock axios globally

describe('Git Client Tests', () => {

  test('should return repository names for techiesyed', async () => {
    const dummyData = [
      { name: 'repo-one' },
      { name: 'repo-two' },
      { name: 'repo-three' }
    ];

    axios.get.mockResolvedValue({ data: dummyData });

    const repos = await GitClient.getRepositories('techiesyed');

    expect(repos).toEqual(['repo-one', 'repo-two', 'repo-three']);
    expect(axios.get).toHaveBeenCalledTimes(1);
    expect(axios.get).toHaveBeenCalledWith('https://api.github.com/users/techiesyed/repos');
  });

});

Explanation of Test:
jest.mock('axios') — mocks the actual Axios library.

axios.get.mockResolvedValue() — simulates a resolved API response.

expect(repos).toEqual() — verifies that the method returns the mocked data.

Ensures no actual HTTP request is made (API isolation).


Run Tests
bash
Copy
Edit
npm test
